numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
}
segments.Current = Route.Segments(routes.Current)
segments.Local = Route.Segments(routes.Local)
segments.Global = Route.Segments(routes.Global)
removed.Global.Segments =anti_join(segments.Global, segments.Current)
added.Local.Segments =anti_join(segments.Local, segments.Global)
removed.Local.Segments =anti_join(added.Local.Segments, segments.Current)
segments.Current = anti_join(segments.Current, segments.Global)
added.Current.Segments =anti_join(segments.Current, added.Local.Segments)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255, alpha = .3), lty=1, lwd=2)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col="black", lty=1, lwd=2)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(2:100, local = 1, global = 1, merge.Neighborhood.Rejects = TRUE)
plot.Solution.Animate(2:1000, local = 1, global = 1, merge.Neighborhood.Rejects = TRUE)
?ifelse
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
}
segments.Current = Route.Segments(routes.Current)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(90, 90, 90, maxColorValue = 255, alpha = 1), rgb(110, 110, 110, maxColorValue = 255, alpha = .8))
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
global.Accepted = subset(obs, obs$Type == "Global.Accepted")
global.Accepted
plot.Solution.Animate(10098:10298, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(90, 90, 90, maxColorValue = 255, alpha = 1), rgb(110, 110, 110, maxColorValue = 255, alpha = .8))
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(10098:10298, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
plot.Solution.ToPNG <- function(image, current, local, global, merge.Neighborhood.Rejects = TRUE)
{
closeAllConnections()
name <- paste('Logs\\Animations2\\', sprintf("SolutionPlot%06d", image),'.png', sep='')
begin.Image = FALSE
if (is.null(dev.list()))
{
begin.Image = TRUE
print(sprintf("Begin Image %d: Current = %d, Local = %d, Global = %d", image, current, local, global))
png(name, width = 2300, height = 1200, antialias = "cleartype", res=130)
}
plot.Solution(current, local, global, merge.Neighborhood.Rejects, begin.Image)
if (((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected")) | !merge.Neighborhood.Rejects)
{
print(sprintf("End Image %d: Current = %d, Local = %d, Global = %d", image, current, local, global))
plot.Solution.HasPlot = FALSE
dev.off()
}
closeAllConnections()
}
plot.Solution.Animate(10098:10108, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
#color.Added.Segments = ifelse(current == local, rgb(90, 90, 90, maxColorValue = 255, alpha = 1), rgb(110, 110, 110, maxColorValue = 255, alpha = .8))
color.Added.Segments = ifelse(current == local, 'black', 'gray')
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(10098:10108, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
?par
?rgb
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(90, 90, 90, maxColorValue = 255, alpha = 255), rgb(100, 100, 100, maxColorValue = 255, alpha = 150))
#color.Added.Segments = ifelse(current == local, 'black', 'gray')
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(10098:10108, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(90, 90, 90, maxColorValue = 255, alpha = 255), rgb(100, 100, 100, maxColorValue = 255, alpha = 150))
#color.Added.Segments = ifelse(current == local, 'black', 'gray')
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(10098:10298, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(120, 120, 120, maxColorValue = 255, alpha = 255), rgb(150, 150, 150, maxColorValue = 255, alpha = 150))
#color.Added.Segments = ifelse(current == local, 'black', 'gray')
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution <- function(current, local, global, merge.Neighborhood.Rejects = TRUE, begin.Image = FALSE)
{
#current = 109016
#local = 9000
#global = 9000
routes.Current <- getRouteVectorFromString(solutions[current])
numRoutes.Current = length(routes.Current)
#routes.Current = data.frame(1: numRoutes.Current, routes.Current)
routes.Local <- getRouteVectorFromString(solutions[local])
numRoutes.Local = length(routes.Local)
routes.Global <- getRouteVectorFromString(solutions[global])
numRoutes.Global = length(routes.Global)
#routes.Best = data.frame(1:numRoutes.Best, routes.Best)
if (begin.Image | !merge.Neighborhood.Rejects)
{
plot.Solution.HasPlot = TRUE
print(sprintf("New Plot at: Current = %d, Local = %d, Global = %d", current, local, global))
optimality = paste("Optimality:", format(round((obs$Instance.OptimalScore.Combined[current] / obs$Current.Score.Combined[current]) * 100, 0), nsmall = 0), "/", format(round((obs$Instance.OptimalScore.Combined[global] / obs$Current.Score.Combined[global]) * 100, 0), nsmall = 0), "%")
combined = paste("Score:", format(round(obs$Current.Score.Combined[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Combined[global], 0), nsmall = 0))
distance = paste("Distance:", format(round(obs$Current.Score.Distance[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.Distance[global], 0), nsmall = 0))
lateness = paste("Lateness:", format(round(obs$Current.Score.Lateness[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Lateness[global], 1), nsmall = 1))
waiting = paste("Waiting:", format(round(obs$Current.Score.Waiting[current], 1), nsmall = 1), "/", format(round(obs$Current.Score.Waiting[global], 1), nsmall = 1))
unmetDemand = paste("UnmetDemand:", format(round(obs$Current.Score.UnmetDemand[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.UnmetDemand[global], 0), nsmall = 0))
overCapacity = paste("OverCapacity:", format(round(obs$Current.Score.OverCapacity[current], 0), nsmall = 0), "/", format(round(obs$Current.Score.OverCapacity[global], 0), nsmall = 0))
numVehicles = paste("Vehicles:", numRoutes.Current, "/", numRoutes.Global)
title = paste(optimality, ", ", combined, ", ", distance, ", ", lateness, ", ", waiting, ", ", unmetDemand, ", ", overCapacity, ", ", numVehicles)
subTitle = paste("Evaluation: ", current, "/", global, ", Iteration: ", obs$Iterated.Iteration[current], "/", obs$Iterated.Iteration[global], ", Pass: ", obs$LocalSearch.Pass[current], "/", obs$LocalSearch.Pass[global], ", ElapseTime: ", floor(obs$ElapseTime[current]), "ms")
#plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n", main = title, font.main = 1, sub = subTitle, cex.sub = 1, font.sub=1)
plot(solutionBorder, type = "n", xaxt='n', yaxt='n', xlab="", ylab="", bty="n")
mtext(title, side = 3, line = 1)
mtext(subTitle, side = 1, line = 1)
mapply(points, completeSolution)
}
segments.Current = Route.Segments(routes.Current)
segments.Global = Route.Segments(routes.Global)
added.Current.Segments =anti_join(segments.Current, segments.Global)
if (!merge.Neighborhood.Rejects)
{
if (nrow(added.Local.Segments))
apply(added.Local.Segments, 1, plot.Segment, col=rgb(110, 110, 110, maxColorValue = 255), lty=1, lwd=2)
if (nrow(removed.Local.Segments))
apply(removed.Local.Segments, 1, plot.Segment, col="white", lty=3, lwd=2)
}
color.Added.Segments = ifelse(current == local, rgb(100, 100, 100, maxColorValue = 255, alpha = 255), rgb(150, 150, 150, maxColorValue = 255, alpha = 150))
#color.Added.Segments = ifelse(current == local, 'black', 'gray')
if (nrow(added.Current.Segments))
apply(added.Current.Segments, 1, plot.Segment, col=color.Added.Segments, lty=1, lwd=2)
if ((obs$Type[current] == "Neighborhood.Rejected") & (obs$Type[current+1] != "Neighborhood.Rejected") & merge.Neighborhood.Rejects)
{
removed.Global.Segments =anti_join(segments.Global, segments.Current)
if (nrow(removed.Global.Segments))
apply(removed.Global.Segments, 1, plot.Segment, col="white", lty=3, lwd=3)
mapply(plot.Route, routes.Global, 1:numRoutes.Global, numRoutes.Global, 1, 3, 1)
maxWaiting <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Waiting'))))
maxLateness <- max(na.omit(unlist(lapply(routes.Current, "[[", 'Lateness'))))
mapply(plot.Points, routes.Current, maxWaiting, maxLateness)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
else if (!merge.Neighborhood.Rejects)
points(unique(data.frame(depots$LocationX, depots$LocationY)), bg = "green", pch = 25, cex=1.5)
}
plot.Solution.Animate(10098:10298, local = 10098, global = 10098, merge.Neighborhood.Rejects = TRUE)
